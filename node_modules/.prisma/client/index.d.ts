
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  password: string
  name: string
  role: Role | null
}

/**
 * Model ApplicationForDistributionSystem
 * 
 */
export type ApplicationForDistributionSystem = {
  id: string
  createdAt: Date
  updatedAt: Date
  status: STATUS | null
  name: string
  email: string
  mobileNumber: string
  applicantAddress: string
  applicantType: ApplicantType
  firmName: string
  State: string
  District: string
}

/**
 * Model Project
 * 
 */
export type Project = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  email: string | null
  Country: string | null
  State: string | null
  City: string | null
  mobileNumber: string | null
  dob: string | null
  occupation: string | null
}

/**
 * Model ProjectDataFields
 * 
 */
export type ProjectDataFields = {
  id: string
  projectId: string
  createdAt: Date
  updatedAt: Date
  fieldName: string
  fieldValue: string
}

/**
 * Model Director
 * 
 */
export type Director = {
  id: string
  projectId: string
  directorName: string
  basicIntro: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ApplicantType: {
  DISTRIBUTOR: 'DISTRIBUTOR',
  STOCKIST: 'STOCKIST'
};

export type ApplicantType = (typeof ApplicantType)[keyof typeof ApplicantType]


export const Role: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const STATUS: {
  PENDING: 'PENDING',
  ACCEPT: 'ACCEPT',
  REJECT: 'REJECT'
};

export type STATUS = (typeof STATUS)[keyof typeof STATUS]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.applicationForDistributionSystem`: Exposes CRUD operations for the **ApplicationForDistributionSystem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationForDistributionSystems
    * const applicationForDistributionSystems = await prisma.applicationForDistributionSystem.findMany()
    * ```
    */
  get applicationForDistributionSystem(): Prisma.ApplicationForDistributionSystemDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.projectDataFields`: Exposes CRUD operations for the **ProjectDataFields** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectDataFields
    * const projectDataFields = await prisma.projectDataFields.findMany()
    * ```
    */
  get projectDataFields(): Prisma.ProjectDataFieldsDelegate<GlobalReject>;

  /**
   * `prisma.director`: Exposes CRUD operations for the **Director** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Directors
    * const directors = await prisma.director.findMany()
    * ```
    */
  get director(): Prisma.DirectorDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ApplicationForDistributionSystem: 'ApplicationForDistributionSystem',
    Project: 'Project',
    ProjectDataFields: 'ProjectDataFields',
    Director: 'Director'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    director: number
    projectDataFields: number
  }

  export type ProjectCountOutputTypeSelect = {
    director?: boolean
    projectDataFields?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<S extends boolean | null | undefined | ProjectCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjectCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProjectCountOutputTypeArgs)
    ? ProjectCountOutputType 
    : S extends { select: any } & (ProjectCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
      : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    password: number
    name: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    password: string
    name: string
    role: Role | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
  }


  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
  }



  /**
   * Model ApplicationForDistributionSystem
   */


  export type AggregateApplicationForDistributionSystem = {
    _count: ApplicationForDistributionSystemCountAggregateOutputType | null
    _min: ApplicationForDistributionSystemMinAggregateOutputType | null
    _max: ApplicationForDistributionSystemMaxAggregateOutputType | null
  }

  export type ApplicationForDistributionSystemMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: STATUS | null
    name: string | null
    email: string | null
    mobileNumber: string | null
    applicantAddress: string | null
    applicantType: ApplicantType | null
    firmName: string | null
    State: string | null
    District: string | null
  }

  export type ApplicationForDistributionSystemMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: STATUS | null
    name: string | null
    email: string | null
    mobileNumber: string | null
    applicantAddress: string | null
    applicantType: ApplicantType | null
    firmName: string | null
    State: string | null
    District: string | null
  }

  export type ApplicationForDistributionSystemCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    status: number
    name: number
    email: number
    mobileNumber: number
    applicantAddress: number
    applicantType: number
    firmName: number
    State: number
    District: number
    _all: number
  }


  export type ApplicationForDistributionSystemMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    name?: true
    email?: true
    mobileNumber?: true
    applicantAddress?: true
    applicantType?: true
    firmName?: true
    State?: true
    District?: true
  }

  export type ApplicationForDistributionSystemMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    name?: true
    email?: true
    mobileNumber?: true
    applicantAddress?: true
    applicantType?: true
    firmName?: true
    State?: true
    District?: true
  }

  export type ApplicationForDistributionSystemCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    name?: true
    email?: true
    mobileNumber?: true
    applicantAddress?: true
    applicantType?: true
    firmName?: true
    State?: true
    District?: true
    _all?: true
  }

  export type ApplicationForDistributionSystemAggregateArgs = {
    /**
     * Filter which ApplicationForDistributionSystem to aggregate.
     */
    where?: ApplicationForDistributionSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationForDistributionSystems to fetch.
     */
    orderBy?: Enumerable<ApplicationForDistributionSystemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationForDistributionSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationForDistributionSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationForDistributionSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationForDistributionSystems
    **/
    _count?: true | ApplicationForDistributionSystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationForDistributionSystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationForDistributionSystemMaxAggregateInputType
  }

  export type GetApplicationForDistributionSystemAggregateType<T extends ApplicationForDistributionSystemAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationForDistributionSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationForDistributionSystem[P]>
      : GetScalarType<T[P], AggregateApplicationForDistributionSystem[P]>
  }




  export type ApplicationForDistributionSystemGroupByArgs = {
    where?: ApplicationForDistributionSystemWhereInput
    orderBy?: Enumerable<ApplicationForDistributionSystemOrderByWithAggregationInput>
    by: ApplicationForDistributionSystemScalarFieldEnum[]
    having?: ApplicationForDistributionSystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationForDistributionSystemCountAggregateInputType | true
    _min?: ApplicationForDistributionSystemMinAggregateInputType
    _max?: ApplicationForDistributionSystemMaxAggregateInputType
  }


  export type ApplicationForDistributionSystemGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    status: STATUS | null
    name: string
    email: string
    mobileNumber: string
    applicantAddress: string
    applicantType: ApplicantType
    firmName: string
    State: string
    District: string
    _count: ApplicationForDistributionSystemCountAggregateOutputType | null
    _min: ApplicationForDistributionSystemMinAggregateOutputType | null
    _max: ApplicationForDistributionSystemMaxAggregateOutputType | null
  }

  type GetApplicationForDistributionSystemGroupByPayload<T extends ApplicationForDistributionSystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ApplicationForDistributionSystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationForDistributionSystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationForDistributionSystemGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationForDistributionSystemGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationForDistributionSystemSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    name?: boolean
    email?: boolean
    mobileNumber?: boolean
    applicantAddress?: boolean
    applicantType?: boolean
    firmName?: boolean
    State?: boolean
    District?: boolean
  }


  export type ApplicationForDistributionSystemGetPayload<S extends boolean | null | undefined | ApplicationForDistributionSystemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ApplicationForDistributionSystem :
    S extends undefined ? never :
    S extends { include: any } & (ApplicationForDistributionSystemArgs | ApplicationForDistributionSystemFindManyArgs)
    ? ApplicationForDistributionSystem 
    : S extends { select: any } & (ApplicationForDistributionSystemArgs | ApplicationForDistributionSystemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ApplicationForDistributionSystem ? ApplicationForDistributionSystem[P] : never
  } 
      : ApplicationForDistributionSystem


  type ApplicationForDistributionSystemCountArgs = 
    Omit<ApplicationForDistributionSystemFindManyArgs, 'select' | 'include'> & {
      select?: ApplicationForDistributionSystemCountAggregateInputType | true
    }

  export interface ApplicationForDistributionSystemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ApplicationForDistributionSystem that matches the filter.
     * @param {ApplicationForDistributionSystemFindUniqueArgs} args - Arguments to find a ApplicationForDistributionSystem
     * @example
     * // Get one ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationForDistributionSystemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApplicationForDistributionSystemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApplicationForDistributionSystem'> extends True ? Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>> : Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T> | null, null>

    /**
     * Find one ApplicationForDistributionSystem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationForDistributionSystemFindUniqueOrThrowArgs} args - Arguments to find a ApplicationForDistributionSystem
     * @example
     * // Get one ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationForDistributionSystemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApplicationForDistributionSystemFindUniqueOrThrowArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Find the first ApplicationForDistributionSystem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemFindFirstArgs} args - Arguments to find a ApplicationForDistributionSystem
     * @example
     * // Get one ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationForDistributionSystemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApplicationForDistributionSystemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApplicationForDistributionSystem'> extends True ? Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>> : Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T> | null, null>

    /**
     * Find the first ApplicationForDistributionSystem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemFindFirstOrThrowArgs} args - Arguments to find a ApplicationForDistributionSystem
     * @example
     * // Get one ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationForDistributionSystemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApplicationForDistributionSystemFindFirstOrThrowArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Find zero or more ApplicationForDistributionSystems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationForDistributionSystems
     * const applicationForDistributionSystems = await prisma.applicationForDistributionSystem.findMany()
     * 
     * // Get first 10 ApplicationForDistributionSystems
     * const applicationForDistributionSystems = await prisma.applicationForDistributionSystem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationForDistributionSystemWithIdOnly = await prisma.applicationForDistributionSystem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicationForDistributionSystemFindManyArgs>(
      args?: SelectSubset<T, ApplicationForDistributionSystemFindManyArgs>
    ): Prisma.PrismaPromise<Array<ApplicationForDistributionSystemGetPayload<T>>>

    /**
     * Create a ApplicationForDistributionSystem.
     * @param {ApplicationForDistributionSystemCreateArgs} args - Arguments to create a ApplicationForDistributionSystem.
     * @example
     * // Create one ApplicationForDistributionSystem
     * const ApplicationForDistributionSystem = await prisma.applicationForDistributionSystem.create({
     *   data: {
     *     // ... data to create a ApplicationForDistributionSystem
     *   }
     * })
     * 
    **/
    create<T extends ApplicationForDistributionSystemCreateArgs>(
      args: SelectSubset<T, ApplicationForDistributionSystemCreateArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Create many ApplicationForDistributionSystems.
     *     @param {ApplicationForDistributionSystemCreateManyArgs} args - Arguments to create many ApplicationForDistributionSystems.
     *     @example
     *     // Create many ApplicationForDistributionSystems
     *     const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationForDistributionSystemCreateManyArgs>(
      args?: SelectSubset<T, ApplicationForDistributionSystemCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApplicationForDistributionSystem.
     * @param {ApplicationForDistributionSystemDeleteArgs} args - Arguments to delete one ApplicationForDistributionSystem.
     * @example
     * // Delete one ApplicationForDistributionSystem
     * const ApplicationForDistributionSystem = await prisma.applicationForDistributionSystem.delete({
     *   where: {
     *     // ... filter to delete one ApplicationForDistributionSystem
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationForDistributionSystemDeleteArgs>(
      args: SelectSubset<T, ApplicationForDistributionSystemDeleteArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Update one ApplicationForDistributionSystem.
     * @param {ApplicationForDistributionSystemUpdateArgs} args - Arguments to update one ApplicationForDistributionSystem.
     * @example
     * // Update one ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationForDistributionSystemUpdateArgs>(
      args: SelectSubset<T, ApplicationForDistributionSystemUpdateArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Delete zero or more ApplicationForDistributionSystems.
     * @param {ApplicationForDistributionSystemDeleteManyArgs} args - Arguments to filter ApplicationForDistributionSystems to delete.
     * @example
     * // Delete a few ApplicationForDistributionSystems
     * const { count } = await prisma.applicationForDistributionSystem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationForDistributionSystemDeleteManyArgs>(
      args?: SelectSubset<T, ApplicationForDistributionSystemDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationForDistributionSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationForDistributionSystems
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationForDistributionSystemUpdateManyArgs>(
      args: SelectSubset<T, ApplicationForDistributionSystemUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApplicationForDistributionSystem.
     * @param {ApplicationForDistributionSystemUpsertArgs} args - Arguments to update or create a ApplicationForDistributionSystem.
     * @example
     * // Update or create a ApplicationForDistributionSystem
     * const applicationForDistributionSystem = await prisma.applicationForDistributionSystem.upsert({
     *   create: {
     *     // ... data to create a ApplicationForDistributionSystem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationForDistributionSystem we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationForDistributionSystemUpsertArgs>(
      args: SelectSubset<T, ApplicationForDistributionSystemUpsertArgs>
    ): Prisma__ApplicationForDistributionSystemClient<ApplicationForDistributionSystemGetPayload<T>>

    /**
     * Count the number of ApplicationForDistributionSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemCountArgs} args - Arguments to filter ApplicationForDistributionSystems to count.
     * @example
     * // Count the number of ApplicationForDistributionSystems
     * const count = await prisma.applicationForDistributionSystem.count({
     *   where: {
     *     // ... the filter for the ApplicationForDistributionSystems we want to count
     *   }
     * })
    **/
    count<T extends ApplicationForDistributionSystemCountArgs>(
      args?: Subset<T, ApplicationForDistributionSystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationForDistributionSystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationForDistributionSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationForDistributionSystemAggregateArgs>(args: Subset<T, ApplicationForDistributionSystemAggregateArgs>): Prisma.PrismaPromise<GetApplicationForDistributionSystemAggregateType<T>>

    /**
     * Group by ApplicationForDistributionSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationForDistributionSystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationForDistributionSystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationForDistributionSystemGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationForDistributionSystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationForDistributionSystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationForDistributionSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationForDistributionSystem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApplicationForDistributionSystemClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ApplicationForDistributionSystem base type for findUnique actions
   */
  export type ApplicationForDistributionSystemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter, which ApplicationForDistributionSystem to fetch.
     */
    where: ApplicationForDistributionSystemWhereUniqueInput
  }

  /**
   * ApplicationForDistributionSystem findUnique
   */
  export interface ApplicationForDistributionSystemFindUniqueArgs extends ApplicationForDistributionSystemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApplicationForDistributionSystem findUniqueOrThrow
   */
  export type ApplicationForDistributionSystemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter, which ApplicationForDistributionSystem to fetch.
     */
    where: ApplicationForDistributionSystemWhereUniqueInput
  }


  /**
   * ApplicationForDistributionSystem base type for findFirst actions
   */
  export type ApplicationForDistributionSystemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter, which ApplicationForDistributionSystem to fetch.
     */
    where?: ApplicationForDistributionSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationForDistributionSystems to fetch.
     */
    orderBy?: Enumerable<ApplicationForDistributionSystemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationForDistributionSystems.
     */
    cursor?: ApplicationForDistributionSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationForDistributionSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationForDistributionSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationForDistributionSystems.
     */
    distinct?: Enumerable<ApplicationForDistributionSystemScalarFieldEnum>
  }

  /**
   * ApplicationForDistributionSystem findFirst
   */
  export interface ApplicationForDistributionSystemFindFirstArgs extends ApplicationForDistributionSystemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ApplicationForDistributionSystem findFirstOrThrow
   */
  export type ApplicationForDistributionSystemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter, which ApplicationForDistributionSystem to fetch.
     */
    where?: ApplicationForDistributionSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationForDistributionSystems to fetch.
     */
    orderBy?: Enumerable<ApplicationForDistributionSystemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationForDistributionSystems.
     */
    cursor?: ApplicationForDistributionSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationForDistributionSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationForDistributionSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationForDistributionSystems.
     */
    distinct?: Enumerable<ApplicationForDistributionSystemScalarFieldEnum>
  }


  /**
   * ApplicationForDistributionSystem findMany
   */
  export type ApplicationForDistributionSystemFindManyArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter, which ApplicationForDistributionSystems to fetch.
     */
    where?: ApplicationForDistributionSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationForDistributionSystems to fetch.
     */
    orderBy?: Enumerable<ApplicationForDistributionSystemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationForDistributionSystems.
     */
    cursor?: ApplicationForDistributionSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationForDistributionSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationForDistributionSystems.
     */
    skip?: number
    distinct?: Enumerable<ApplicationForDistributionSystemScalarFieldEnum>
  }


  /**
   * ApplicationForDistributionSystem create
   */
  export type ApplicationForDistributionSystemCreateArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * The data needed to create a ApplicationForDistributionSystem.
     */
    data: XOR<ApplicationForDistributionSystemCreateInput, ApplicationForDistributionSystemUncheckedCreateInput>
  }


  /**
   * ApplicationForDistributionSystem createMany
   */
  export type ApplicationForDistributionSystemCreateManyArgs = {
    /**
     * The data used to create many ApplicationForDistributionSystems.
     */
    data: Enumerable<ApplicationForDistributionSystemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApplicationForDistributionSystem update
   */
  export type ApplicationForDistributionSystemUpdateArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * The data needed to update a ApplicationForDistributionSystem.
     */
    data: XOR<ApplicationForDistributionSystemUpdateInput, ApplicationForDistributionSystemUncheckedUpdateInput>
    /**
     * Choose, which ApplicationForDistributionSystem to update.
     */
    where: ApplicationForDistributionSystemWhereUniqueInput
  }


  /**
   * ApplicationForDistributionSystem updateMany
   */
  export type ApplicationForDistributionSystemUpdateManyArgs = {
    /**
     * The data used to update ApplicationForDistributionSystems.
     */
    data: XOR<ApplicationForDistributionSystemUpdateManyMutationInput, ApplicationForDistributionSystemUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationForDistributionSystems to update
     */
    where?: ApplicationForDistributionSystemWhereInput
  }


  /**
   * ApplicationForDistributionSystem upsert
   */
  export type ApplicationForDistributionSystemUpsertArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * The filter to search for the ApplicationForDistributionSystem to update in case it exists.
     */
    where: ApplicationForDistributionSystemWhereUniqueInput
    /**
     * In case the ApplicationForDistributionSystem found by the `where` argument doesn't exist, create a new ApplicationForDistributionSystem with this data.
     */
    create: XOR<ApplicationForDistributionSystemCreateInput, ApplicationForDistributionSystemUncheckedCreateInput>
    /**
     * In case the ApplicationForDistributionSystem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationForDistributionSystemUpdateInput, ApplicationForDistributionSystemUncheckedUpdateInput>
  }


  /**
   * ApplicationForDistributionSystem delete
   */
  export type ApplicationForDistributionSystemDeleteArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
    /**
     * Filter which ApplicationForDistributionSystem to delete.
     */
    where: ApplicationForDistributionSystemWhereUniqueInput
  }


  /**
   * ApplicationForDistributionSystem deleteMany
   */
  export type ApplicationForDistributionSystemDeleteManyArgs = {
    /**
     * Filter which ApplicationForDistributionSystems to delete
     */
    where?: ApplicationForDistributionSystemWhereInput
  }


  /**
   * ApplicationForDistributionSystem without action
   */
  export type ApplicationForDistributionSystemArgs = {
    /**
     * Select specific fields to fetch from the ApplicationForDistributionSystem
     */
    select?: ApplicationForDistributionSystemSelect | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    Country: string | null
    State: string | null
    City: string | null
    mobileNumber: string | null
    dob: string | null
    occupation: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    Country: string | null
    State: string | null
    City: string | null
    mobileNumber: string | null
    dob: string | null
    occupation: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    email: number
    Country: number
    State: number
    City: number
    mobileNumber: number
    dob: number
    occupation: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    Country?: true
    State?: true
    City?: true
    mobileNumber?: true
    dob?: true
    occupation?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    Country?: true
    State?: true
    City?: true
    mobileNumber?: true
    dob?: true
    occupation?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    Country?: true
    State?: true
    City?: true
    mobileNumber?: true
    dob?: true
    occupation?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: ProjectScalarFieldEnum[]
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    email: string | null
    Country: string | null
    State: string | null
    City: string | null
    mobileNumber: string | null
    dob: string | null
    occupation: string | null
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    Country?: boolean
    State?: boolean
    City?: boolean
    mobileNumber?: boolean
    dob?: boolean
    occupation?: boolean
    director?: boolean | Project$directorArgs
    projectDataFields?: boolean | Project$projectDataFieldsArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }


  export type ProjectInclude = {
    director?: boolean | Project$directorArgs
    projectDataFields?: boolean | Project$projectDataFieldsArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectGetPayload<S extends boolean | null | undefined | ProjectArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Project :
    S extends undefined ? never :
    S extends { include: any } & (ProjectArgs | ProjectFindManyArgs)
    ? Project  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'director' ? Array < DirectorGetPayload<S['include'][P]>>  :
        P extends 'projectDataFields' ? Array < ProjectDataFieldsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProjectArgs | ProjectFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'director' ? Array < DirectorGetPayload<S['select'][P]>>  :
        P extends 'projectDataFields' ? Array < ProjectDataFieldsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Project ? Project[P] : never
  } 
      : Project


  type ProjectCountArgs = 
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProjectGetPayload<T>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    director<T extends Project$directorArgs= {}>(args?: Subset<T, Project$directorArgs>): Prisma.PrismaPromise<Array<DirectorGetPayload<T>>| Null>;

    projectDataFields<T extends Project$projectDataFieldsArgs= {}>(args?: Subset<T, Project$projectDataFieldsArgs>): Prisma.PrismaPromise<Array<ProjectDataFieldsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUnique
   */
  export interface ProjectFindUniqueArgs extends ProjectFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }

  /**
   * Project findFirst
   */
  export interface ProjectFindFirstArgs extends ProjectFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     */
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project.director
   */
  export type Project$directorArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    where?: DirectorWhereInput
    orderBy?: Enumerable<DirectorOrderByWithRelationInput>
    cursor?: DirectorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }


  /**
   * Project.projectDataFields
   */
  export type Project$projectDataFieldsArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    where?: ProjectDataFieldsWhereInput
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithRelationInput>
    cursor?: ProjectDataFieldsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectDataFieldsScalarFieldEnum>
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude | null
  }



  /**
   * Model ProjectDataFields
   */


  export type AggregateProjectDataFields = {
    _count: ProjectDataFieldsCountAggregateOutputType | null
    _min: ProjectDataFieldsMinAggregateOutputType | null
    _max: ProjectDataFieldsMaxAggregateOutputType | null
  }

  export type ProjectDataFieldsMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fieldName: string | null
    fieldValue: string | null
  }

  export type ProjectDataFieldsMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fieldName: string | null
    fieldValue: string | null
  }

  export type ProjectDataFieldsCountAggregateOutputType = {
    id: number
    projectId: number
    createdAt: number
    updatedAt: number
    fieldName: number
    fieldValue: number
    _all: number
  }


  export type ProjectDataFieldsMinAggregateInputType = {
    id?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    fieldName?: true
    fieldValue?: true
  }

  export type ProjectDataFieldsMaxAggregateInputType = {
    id?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    fieldName?: true
    fieldValue?: true
  }

  export type ProjectDataFieldsCountAggregateInputType = {
    id?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    fieldName?: true
    fieldValue?: true
    _all?: true
  }

  export type ProjectDataFieldsAggregateArgs = {
    /**
     * Filter which ProjectDataFields to aggregate.
     */
    where?: ProjectDataFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDataFields to fetch.
     */
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectDataFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDataFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDataFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectDataFields
    **/
    _count?: true | ProjectDataFieldsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectDataFieldsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectDataFieldsMaxAggregateInputType
  }

  export type GetProjectDataFieldsAggregateType<T extends ProjectDataFieldsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectDataFields]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectDataFields[P]>
      : GetScalarType<T[P], AggregateProjectDataFields[P]>
  }




  export type ProjectDataFieldsGroupByArgs = {
    where?: ProjectDataFieldsWhereInput
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithAggregationInput>
    by: ProjectDataFieldsScalarFieldEnum[]
    having?: ProjectDataFieldsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectDataFieldsCountAggregateInputType | true
    _min?: ProjectDataFieldsMinAggregateInputType
    _max?: ProjectDataFieldsMaxAggregateInputType
  }


  export type ProjectDataFieldsGroupByOutputType = {
    id: string
    projectId: string
    createdAt: Date
    updatedAt: Date
    fieldName: string
    fieldValue: string
    _count: ProjectDataFieldsCountAggregateOutputType | null
    _min: ProjectDataFieldsMinAggregateOutputType | null
    _max: ProjectDataFieldsMaxAggregateOutputType | null
  }

  type GetProjectDataFieldsGroupByPayload<T extends ProjectDataFieldsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectDataFieldsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectDataFieldsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectDataFieldsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectDataFieldsGroupByOutputType[P]>
        }
      >
    >


  export type ProjectDataFieldsSelect = {
    id?: boolean
    projectData?: boolean | ProjectArgs
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fieldName?: boolean
    fieldValue?: boolean
  }


  export type ProjectDataFieldsInclude = {
    projectData?: boolean | ProjectArgs
  }

  export type ProjectDataFieldsGetPayload<S extends boolean | null | undefined | ProjectDataFieldsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjectDataFields :
    S extends undefined ? never :
    S extends { include: any } & (ProjectDataFieldsArgs | ProjectDataFieldsFindManyArgs)
    ? ProjectDataFields  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'projectData' ? ProjectGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ProjectDataFieldsArgs | ProjectDataFieldsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'projectData' ? ProjectGetPayload<S['select'][P]> | null :  P extends keyof ProjectDataFields ? ProjectDataFields[P] : never
  } 
      : ProjectDataFields


  type ProjectDataFieldsCountArgs = 
    Omit<ProjectDataFieldsFindManyArgs, 'select' | 'include'> & {
      select?: ProjectDataFieldsCountAggregateInputType | true
    }

  export interface ProjectDataFieldsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ProjectDataFields that matches the filter.
     * @param {ProjectDataFieldsFindUniqueArgs} args - Arguments to find a ProjectDataFields
     * @example
     * // Get one ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectDataFieldsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectDataFieldsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProjectDataFields'> extends True ? Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>> : Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T> | null, null>

    /**
     * Find one ProjectDataFields that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectDataFieldsFindUniqueOrThrowArgs} args - Arguments to find a ProjectDataFields
     * @example
     * // Get one ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectDataFieldsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectDataFieldsFindUniqueOrThrowArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Find the first ProjectDataFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsFindFirstArgs} args - Arguments to find a ProjectDataFields
     * @example
     * // Get one ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectDataFieldsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectDataFieldsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProjectDataFields'> extends True ? Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>> : Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T> | null, null>

    /**
     * Find the first ProjectDataFields that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsFindFirstOrThrowArgs} args - Arguments to find a ProjectDataFields
     * @example
     * // Get one ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectDataFieldsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectDataFieldsFindFirstOrThrowArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Find zero or more ProjectDataFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findMany()
     * 
     * // Get first 10 ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectDataFieldsWithIdOnly = await prisma.projectDataFields.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectDataFieldsFindManyArgs>(
      args?: SelectSubset<T, ProjectDataFieldsFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProjectDataFieldsGetPayload<T>>>

    /**
     * Create a ProjectDataFields.
     * @param {ProjectDataFieldsCreateArgs} args - Arguments to create a ProjectDataFields.
     * @example
     * // Create one ProjectDataFields
     * const ProjectDataFields = await prisma.projectDataFields.create({
     *   data: {
     *     // ... data to create a ProjectDataFields
     *   }
     * })
     * 
    **/
    create<T extends ProjectDataFieldsCreateArgs>(
      args: SelectSubset<T, ProjectDataFieldsCreateArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Create many ProjectDataFields.
     *     @param {ProjectDataFieldsCreateManyArgs} args - Arguments to create many ProjectDataFields.
     *     @example
     *     // Create many ProjectDataFields
     *     const projectDataFields = await prisma.projectDataFields.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectDataFieldsCreateManyArgs>(
      args?: SelectSubset<T, ProjectDataFieldsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectDataFields.
     * @param {ProjectDataFieldsDeleteArgs} args - Arguments to delete one ProjectDataFields.
     * @example
     * // Delete one ProjectDataFields
     * const ProjectDataFields = await prisma.projectDataFields.delete({
     *   where: {
     *     // ... filter to delete one ProjectDataFields
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDataFieldsDeleteArgs>(
      args: SelectSubset<T, ProjectDataFieldsDeleteArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Update one ProjectDataFields.
     * @param {ProjectDataFieldsUpdateArgs} args - Arguments to update one ProjectDataFields.
     * @example
     * // Update one ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectDataFieldsUpdateArgs>(
      args: SelectSubset<T, ProjectDataFieldsUpdateArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Delete zero or more ProjectDataFields.
     * @param {ProjectDataFieldsDeleteManyArgs} args - Arguments to filter ProjectDataFields to delete.
     * @example
     * // Delete a few ProjectDataFields
     * const { count } = await prisma.projectDataFields.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDataFieldsDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDataFieldsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectDataFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectDataFieldsUpdateManyArgs>(
      args: SelectSubset<T, ProjectDataFieldsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectDataFields.
     * @param {ProjectDataFieldsUpsertArgs} args - Arguments to update or create a ProjectDataFields.
     * @example
     * // Update or create a ProjectDataFields
     * const projectDataFields = await prisma.projectDataFields.upsert({
     *   create: {
     *     // ... data to create a ProjectDataFields
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectDataFields we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectDataFieldsUpsertArgs>(
      args: SelectSubset<T, ProjectDataFieldsUpsertArgs>
    ): Prisma__ProjectDataFieldsClient<ProjectDataFieldsGetPayload<T>>

    /**
     * Count the number of ProjectDataFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsCountArgs} args - Arguments to filter ProjectDataFields to count.
     * @example
     * // Count the number of ProjectDataFields
     * const count = await prisma.projectDataFields.count({
     *   where: {
     *     // ... the filter for the ProjectDataFields we want to count
     *   }
     * })
    **/
    count<T extends ProjectDataFieldsCountArgs>(
      args?: Subset<T, ProjectDataFieldsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectDataFieldsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectDataFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectDataFieldsAggregateArgs>(args: Subset<T, ProjectDataFieldsAggregateArgs>): Prisma.PrismaPromise<GetProjectDataFieldsAggregateType<T>>

    /**
     * Group by ProjectDataFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDataFieldsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectDataFieldsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectDataFieldsGroupByArgs['orderBy'] }
        : { orderBy?: ProjectDataFieldsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectDataFieldsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectDataFieldsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectDataFields.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectDataFieldsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    projectData<T extends ProjectArgs= {}>(args?: Subset<T, ProjectArgs>): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProjectDataFields base type for findUnique actions
   */
  export type ProjectDataFieldsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter, which ProjectDataFields to fetch.
     */
    where: ProjectDataFieldsWhereUniqueInput
  }

  /**
   * ProjectDataFields findUnique
   */
  export interface ProjectDataFieldsFindUniqueArgs extends ProjectDataFieldsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectDataFields findUniqueOrThrow
   */
  export type ProjectDataFieldsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter, which ProjectDataFields to fetch.
     */
    where: ProjectDataFieldsWhereUniqueInput
  }


  /**
   * ProjectDataFields base type for findFirst actions
   */
  export type ProjectDataFieldsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter, which ProjectDataFields to fetch.
     */
    where?: ProjectDataFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDataFields to fetch.
     */
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectDataFields.
     */
    cursor?: ProjectDataFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDataFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDataFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectDataFields.
     */
    distinct?: Enumerable<ProjectDataFieldsScalarFieldEnum>
  }

  /**
   * ProjectDataFields findFirst
   */
  export interface ProjectDataFieldsFindFirstArgs extends ProjectDataFieldsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectDataFields findFirstOrThrow
   */
  export type ProjectDataFieldsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter, which ProjectDataFields to fetch.
     */
    where?: ProjectDataFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDataFields to fetch.
     */
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectDataFields.
     */
    cursor?: ProjectDataFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDataFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDataFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectDataFields.
     */
    distinct?: Enumerable<ProjectDataFieldsScalarFieldEnum>
  }


  /**
   * ProjectDataFields findMany
   */
  export type ProjectDataFieldsFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter, which ProjectDataFields to fetch.
     */
    where?: ProjectDataFieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDataFields to fetch.
     */
    orderBy?: Enumerable<ProjectDataFieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectDataFields.
     */
    cursor?: ProjectDataFieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDataFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDataFields.
     */
    skip?: number
    distinct?: Enumerable<ProjectDataFieldsScalarFieldEnum>
  }


  /**
   * ProjectDataFields create
   */
  export type ProjectDataFieldsCreateArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * The data needed to create a ProjectDataFields.
     */
    data: XOR<ProjectDataFieldsCreateInput, ProjectDataFieldsUncheckedCreateInput>
  }


  /**
   * ProjectDataFields createMany
   */
  export type ProjectDataFieldsCreateManyArgs = {
    /**
     * The data used to create many ProjectDataFields.
     */
    data: Enumerable<ProjectDataFieldsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProjectDataFields update
   */
  export type ProjectDataFieldsUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * The data needed to update a ProjectDataFields.
     */
    data: XOR<ProjectDataFieldsUpdateInput, ProjectDataFieldsUncheckedUpdateInput>
    /**
     * Choose, which ProjectDataFields to update.
     */
    where: ProjectDataFieldsWhereUniqueInput
  }


  /**
   * ProjectDataFields updateMany
   */
  export type ProjectDataFieldsUpdateManyArgs = {
    /**
     * The data used to update ProjectDataFields.
     */
    data: XOR<ProjectDataFieldsUpdateManyMutationInput, ProjectDataFieldsUncheckedUpdateManyInput>
    /**
     * Filter which ProjectDataFields to update
     */
    where?: ProjectDataFieldsWhereInput
  }


  /**
   * ProjectDataFields upsert
   */
  export type ProjectDataFieldsUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * The filter to search for the ProjectDataFields to update in case it exists.
     */
    where: ProjectDataFieldsWhereUniqueInput
    /**
     * In case the ProjectDataFields found by the `where` argument doesn't exist, create a new ProjectDataFields with this data.
     */
    create: XOR<ProjectDataFieldsCreateInput, ProjectDataFieldsUncheckedCreateInput>
    /**
     * In case the ProjectDataFields was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectDataFieldsUpdateInput, ProjectDataFieldsUncheckedUpdateInput>
  }


  /**
   * ProjectDataFields delete
   */
  export type ProjectDataFieldsDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
    /**
     * Filter which ProjectDataFields to delete.
     */
    where: ProjectDataFieldsWhereUniqueInput
  }


  /**
   * ProjectDataFields deleteMany
   */
  export type ProjectDataFieldsDeleteManyArgs = {
    /**
     * Filter which ProjectDataFields to delete
     */
    where?: ProjectDataFieldsWhereInput
  }


  /**
   * ProjectDataFields without action
   */
  export type ProjectDataFieldsArgs = {
    /**
     * Select specific fields to fetch from the ProjectDataFields
     */
    select?: ProjectDataFieldsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectDataFieldsInclude | null
  }



  /**
   * Model Director
   */


  export type AggregateDirector = {
    _count: DirectorCountAggregateOutputType | null
    _min: DirectorMinAggregateOutputType | null
    _max: DirectorMaxAggregateOutputType | null
  }

  export type DirectorMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    directorName: string | null
    basicIntro: string | null
  }

  export type DirectorMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    directorName: string | null
    basicIntro: string | null
  }

  export type DirectorCountAggregateOutputType = {
    id: number
    projectId: number
    directorName: number
    basicIntro: number
    _all: number
  }


  export type DirectorMinAggregateInputType = {
    id?: true
    projectId?: true
    directorName?: true
    basicIntro?: true
  }

  export type DirectorMaxAggregateInputType = {
    id?: true
    projectId?: true
    directorName?: true
    basicIntro?: true
  }

  export type DirectorCountAggregateInputType = {
    id?: true
    projectId?: true
    directorName?: true
    basicIntro?: true
    _all?: true
  }

  export type DirectorAggregateArgs = {
    /**
     * Filter which Director to aggregate.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: Enumerable<DirectorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Directors
    **/
    _count?: true | DirectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectorMaxAggregateInputType
  }

  export type GetDirectorAggregateType<T extends DirectorAggregateArgs> = {
        [P in keyof T & keyof AggregateDirector]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirector[P]>
      : GetScalarType<T[P], AggregateDirector[P]>
  }




  export type DirectorGroupByArgs = {
    where?: DirectorWhereInput
    orderBy?: Enumerable<DirectorOrderByWithAggregationInput>
    by: DirectorScalarFieldEnum[]
    having?: DirectorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectorCountAggregateInputType | true
    _min?: DirectorMinAggregateInputType
    _max?: DirectorMaxAggregateInputType
  }


  export type DirectorGroupByOutputType = {
    id: string
    projectId: string
    directorName: string
    basicIntro: string
    _count: DirectorCountAggregateOutputType | null
    _min: DirectorMinAggregateOutputType | null
    _max: DirectorMaxAggregateOutputType | null
  }

  type GetDirectorGroupByPayload<T extends DirectorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DirectorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectorGroupByOutputType[P]>
            : GetScalarType<T[P], DirectorGroupByOutputType[P]>
        }
      >
    >


  export type DirectorSelect = {
    id?: boolean
    project?: boolean | ProjectArgs
    projectId?: boolean
    directorName?: boolean
    basicIntro?: boolean
  }


  export type DirectorInclude = {
    project?: boolean | ProjectArgs
  }

  export type DirectorGetPayload<S extends boolean | null | undefined | DirectorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Director :
    S extends undefined ? never :
    S extends { include: any } & (DirectorArgs | DirectorFindManyArgs)
    ? Director  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'project' ? ProjectGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (DirectorArgs | DirectorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'project' ? ProjectGetPayload<S['select'][P]> | null :  P extends keyof Director ? Director[P] : never
  } 
      : Director


  type DirectorCountArgs = 
    Omit<DirectorFindManyArgs, 'select' | 'include'> & {
      select?: DirectorCountAggregateInputType | true
    }

  export interface DirectorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Director that matches the filter.
     * @param {DirectorFindUniqueArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DirectorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DirectorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Director'> extends True ? Prisma__DirectorClient<DirectorGetPayload<T>> : Prisma__DirectorClient<DirectorGetPayload<T> | null, null>

    /**
     * Find one Director that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DirectorFindUniqueOrThrowArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DirectorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DirectorFindUniqueOrThrowArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Find the first Director that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindFirstArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DirectorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DirectorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Director'> extends True ? Prisma__DirectorClient<DirectorGetPayload<T>> : Prisma__DirectorClient<DirectorGetPayload<T> | null, null>

    /**
     * Find the first Director that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindFirstOrThrowArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DirectorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DirectorFindFirstOrThrowArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Find zero or more Directors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Directors
     * const directors = await prisma.director.findMany()
     * 
     * // Get first 10 Directors
     * const directors = await prisma.director.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directorWithIdOnly = await prisma.director.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DirectorFindManyArgs>(
      args?: SelectSubset<T, DirectorFindManyArgs>
    ): Prisma.PrismaPromise<Array<DirectorGetPayload<T>>>

    /**
     * Create a Director.
     * @param {DirectorCreateArgs} args - Arguments to create a Director.
     * @example
     * // Create one Director
     * const Director = await prisma.director.create({
     *   data: {
     *     // ... data to create a Director
     *   }
     * })
     * 
    **/
    create<T extends DirectorCreateArgs>(
      args: SelectSubset<T, DirectorCreateArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Create many Directors.
     *     @param {DirectorCreateManyArgs} args - Arguments to create many Directors.
     *     @example
     *     // Create many Directors
     *     const director = await prisma.director.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DirectorCreateManyArgs>(
      args?: SelectSubset<T, DirectorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Director.
     * @param {DirectorDeleteArgs} args - Arguments to delete one Director.
     * @example
     * // Delete one Director
     * const Director = await prisma.director.delete({
     *   where: {
     *     // ... filter to delete one Director
     *   }
     * })
     * 
    **/
    delete<T extends DirectorDeleteArgs>(
      args: SelectSubset<T, DirectorDeleteArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Update one Director.
     * @param {DirectorUpdateArgs} args - Arguments to update one Director.
     * @example
     * // Update one Director
     * const director = await prisma.director.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DirectorUpdateArgs>(
      args: SelectSubset<T, DirectorUpdateArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Delete zero or more Directors.
     * @param {DirectorDeleteManyArgs} args - Arguments to filter Directors to delete.
     * @example
     * // Delete a few Directors
     * const { count } = await prisma.director.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DirectorDeleteManyArgs>(
      args?: SelectSubset<T, DirectorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Directors
     * const director = await prisma.director.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DirectorUpdateManyArgs>(
      args: SelectSubset<T, DirectorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Director.
     * @param {DirectorUpsertArgs} args - Arguments to update or create a Director.
     * @example
     * // Update or create a Director
     * const director = await prisma.director.upsert({
     *   create: {
     *     // ... data to create a Director
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Director we want to update
     *   }
     * })
    **/
    upsert<T extends DirectorUpsertArgs>(
      args: SelectSubset<T, DirectorUpsertArgs>
    ): Prisma__DirectorClient<DirectorGetPayload<T>>

    /**
     * Count the number of Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorCountArgs} args - Arguments to filter Directors to count.
     * @example
     * // Count the number of Directors
     * const count = await prisma.director.count({
     *   where: {
     *     // ... the filter for the Directors we want to count
     *   }
     * })
    **/
    count<T extends DirectorCountArgs>(
      args?: Subset<T, DirectorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Director.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectorAggregateArgs>(args: Subset<T, DirectorAggregateArgs>): Prisma.PrismaPromise<GetDirectorAggregateType<T>>

    /**
     * Group by Director.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectorGroupByArgs['orderBy'] }
        : { orderBy?: DirectorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Director.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DirectorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs= {}>(args?: Subset<T, ProjectArgs>): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Director base type for findUnique actions
   */
  export type DirectorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter, which Director to fetch.
     */
    where: DirectorWhereUniqueInput
  }

  /**
   * Director findUnique
   */
  export interface DirectorFindUniqueArgs extends DirectorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Director findUniqueOrThrow
   */
  export type DirectorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter, which Director to fetch.
     */
    where: DirectorWhereUniqueInput
  }


  /**
   * Director base type for findFirst actions
   */
  export type DirectorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter, which Director to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: Enumerable<DirectorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Directors.
     */
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }

  /**
   * Director findFirst
   */
  export interface DirectorFindFirstArgs extends DirectorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Director findFirstOrThrow
   */
  export type DirectorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter, which Director to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: Enumerable<DirectorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Directors.
     */
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }


  /**
   * Director findMany
   */
  export type DirectorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter, which Directors to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: Enumerable<DirectorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }


  /**
   * Director create
   */
  export type DirectorCreateArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * The data needed to create a Director.
     */
    data: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
  }


  /**
   * Director createMany
   */
  export type DirectorCreateManyArgs = {
    /**
     * The data used to create many Directors.
     */
    data: Enumerable<DirectorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Director update
   */
  export type DirectorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * The data needed to update a Director.
     */
    data: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
    /**
     * Choose, which Director to update.
     */
    where: DirectorWhereUniqueInput
  }


  /**
   * Director updateMany
   */
  export type DirectorUpdateManyArgs = {
    /**
     * The data used to update Directors.
     */
    data: XOR<DirectorUpdateManyMutationInput, DirectorUncheckedUpdateManyInput>
    /**
     * Filter which Directors to update
     */
    where?: DirectorWhereInput
  }


  /**
   * Director upsert
   */
  export type DirectorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * The filter to search for the Director to update in case it exists.
     */
    where: DirectorWhereUniqueInput
    /**
     * In case the Director found by the `where` argument doesn't exist, create a new Director with this data.
     */
    create: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
    /**
     * In case the Director was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
  }


  /**
   * Director delete
   */
  export type DirectorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
    /**
     * Filter which Director to delete.
     */
    where: DirectorWhereUniqueInput
  }


  /**
   * Director deleteMany
   */
  export type DirectorDeleteManyArgs = {
    /**
     * Filter which Directors to delete
     */
    where?: DirectorWhereInput
  }


  /**
   * Director without action
   */
  export type DirectorArgs = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectorInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ApplicationForDistributionSystemScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    name: 'name',
    email: 'email',
    mobileNumber: 'mobileNumber',
    applicantAddress: 'applicantAddress',
    applicantType: 'applicantType',
    firmName: 'firmName',
    State: 'State',
    District: 'District'
  };

  export type ApplicationForDistributionSystemScalarFieldEnum = (typeof ApplicationForDistributionSystemScalarFieldEnum)[keyof typeof ApplicationForDistributionSystemScalarFieldEnum]


  export const DirectorScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    directorName: 'directorName',
    basicIntro: 'basicIntro'
  };

  export type DirectorScalarFieldEnum = (typeof DirectorScalarFieldEnum)[keyof typeof DirectorScalarFieldEnum]


  export const ProjectDataFieldsScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fieldName: 'fieldName',
    fieldValue: 'fieldValue'
  };

  export type ProjectDataFieldsScalarFieldEnum = (typeof ProjectDataFieldsScalarFieldEnum)[keyof typeof ProjectDataFieldsScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    email: 'email',
    Country: 'Country',
    State: 'State',
    City: 'City',
    mobileNumber: 'mobileNumber',
    dob: 'dob',
    occupation: 'occupation'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    role?: EnumRoleNullableFilter | Role | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    role?: EnumRoleNullableWithAggregatesFilter | Role | null
  }

  export type ApplicationForDistributionSystemWhereInput = {
    AND?: Enumerable<ApplicationForDistributionSystemWhereInput>
    OR?: Enumerable<ApplicationForDistributionSystemWhereInput>
    NOT?: Enumerable<ApplicationForDistributionSystemWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: EnumSTATUSNullableFilter | STATUS | null
    name?: StringFilter | string
    email?: StringFilter | string
    mobileNumber?: StringFilter | string
    applicantAddress?: StringFilter | string
    applicantType?: EnumApplicantTypeFilter | ApplicantType
    firmName?: StringFilter | string
    State?: StringFilter | string
    District?: StringFilter | string
  }

  export type ApplicationForDistributionSystemOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    name?: SortOrder
    email?: SortOrder
    mobileNumber?: SortOrder
    applicantAddress?: SortOrder
    applicantType?: SortOrder
    firmName?: SortOrder
    State?: SortOrder
    District?: SortOrder
  }

  export type ApplicationForDistributionSystemWhereUniqueInput = {
    id?: string
  }

  export type ApplicationForDistributionSystemOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    name?: SortOrder
    email?: SortOrder
    mobileNumber?: SortOrder
    applicantAddress?: SortOrder
    applicantType?: SortOrder
    firmName?: SortOrder
    State?: SortOrder
    District?: SortOrder
    _count?: ApplicationForDistributionSystemCountOrderByAggregateInput
    _max?: ApplicationForDistributionSystemMaxOrderByAggregateInput
    _min?: ApplicationForDistributionSystemMinOrderByAggregateInput
  }

  export type ApplicationForDistributionSystemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApplicationForDistributionSystemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApplicationForDistributionSystemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApplicationForDistributionSystemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    status?: EnumSTATUSNullableWithAggregatesFilter | STATUS | null
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    mobileNumber?: StringWithAggregatesFilter | string
    applicantAddress?: StringWithAggregatesFilter | string
    applicantType?: EnumApplicantTypeWithAggregatesFilter | ApplicantType
    firmName?: StringWithAggregatesFilter | string
    State?: StringWithAggregatesFilter | string
    District?: StringWithAggregatesFilter | string
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    Country?: StringNullableFilter | string | null
    State?: StringNullableFilter | string | null
    City?: StringNullableFilter | string | null
    mobileNumber?: StringNullableFilter | string | null
    dob?: StringNullableFilter | string | null
    occupation?: StringNullableFilter | string | null
    director?: DirectorListRelationFilter
    projectDataFields?: ProjectDataFieldsListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    mobileNumber?: SortOrder
    dob?: SortOrder
    occupation?: SortOrder
    director?: DirectorOrderByRelationAggregateInput
    projectDataFields?: ProjectDataFieldsOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = {
    id?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    mobileNumber?: SortOrder
    dob?: SortOrder
    occupation?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    Country?: StringNullableWithAggregatesFilter | string | null
    State?: StringNullableWithAggregatesFilter | string | null
    City?: StringNullableWithAggregatesFilter | string | null
    mobileNumber?: StringNullableWithAggregatesFilter | string | null
    dob?: StringNullableWithAggregatesFilter | string | null
    occupation?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProjectDataFieldsWhereInput = {
    AND?: Enumerable<ProjectDataFieldsWhereInput>
    OR?: Enumerable<ProjectDataFieldsWhereInput>
    NOT?: Enumerable<ProjectDataFieldsWhereInput>
    id?: StringFilter | string
    projectData?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    projectId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    fieldName?: StringFilter | string
    fieldValue?: StringFilter | string
  }

  export type ProjectDataFieldsOrderByWithRelationInput = {
    id?: SortOrder
    projectData?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
  }

  export type ProjectDataFieldsWhereUniqueInput = {
    id?: string
  }

  export type ProjectDataFieldsOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    _count?: ProjectDataFieldsCountOrderByAggregateInput
    _max?: ProjectDataFieldsMaxOrderByAggregateInput
    _min?: ProjectDataFieldsMinOrderByAggregateInput
  }

  export type ProjectDataFieldsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectDataFieldsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectDataFieldsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectDataFieldsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    projectId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    fieldName?: StringWithAggregatesFilter | string
    fieldValue?: StringWithAggregatesFilter | string
  }

  export type DirectorWhereInput = {
    AND?: Enumerable<DirectorWhereInput>
    OR?: Enumerable<DirectorWhereInput>
    NOT?: Enumerable<DirectorWhereInput>
    id?: StringFilter | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    projectId?: StringFilter | string
    directorName?: StringFilter | string
    basicIntro?: StringFilter | string
  }

  export type DirectorOrderByWithRelationInput = {
    id?: SortOrder
    project?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    directorName?: SortOrder
    basicIntro?: SortOrder
  }

  export type DirectorWhereUniqueInput = {
    id?: string
  }

  export type DirectorOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    directorName?: SortOrder
    basicIntro?: SortOrder
    _count?: DirectorCountOrderByAggregateInput
    _max?: DirectorMaxOrderByAggregateInput
    _min?: DirectorMinOrderByAggregateInput
  }

  export type DirectorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DirectorScalarWhereWithAggregatesInput>
    OR?: Enumerable<DirectorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DirectorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    projectId?: StringWithAggregatesFilter | string
    directorName?: StringWithAggregatesFilter | string
    basicIntro?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    role?: Role | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    role?: Role | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | Role | null
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | Role | null
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    role?: Role | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | Role | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumRoleFieldUpdateOperationsInput | Role | null
  }

  export type ApplicationForDistributionSystemCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: STATUS | null
    name: string
    email: string
    mobileNumber: string
    applicantAddress: string
    applicantType: ApplicantType
    firmName: string
    State: string
    District: string
  }

  export type ApplicationForDistributionSystemUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: STATUS | null
    name: string
    email: string
    mobileNumber: string
    applicantAddress: string
    applicantType: ApplicantType
    firmName: string
    State: string
    District: string
  }

  export type ApplicationForDistributionSystemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    applicantAddress?: StringFieldUpdateOperationsInput | string
    applicantType?: EnumApplicantTypeFieldUpdateOperationsInput | ApplicantType
    firmName?: StringFieldUpdateOperationsInput | string
    State?: StringFieldUpdateOperationsInput | string
    District?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationForDistributionSystemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    applicantAddress?: StringFieldUpdateOperationsInput | string
    applicantType?: EnumApplicantTypeFieldUpdateOperationsInput | ApplicantType
    firmName?: StringFieldUpdateOperationsInput | string
    State?: StringFieldUpdateOperationsInput | string
    District?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationForDistributionSystemCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: STATUS | null
    name: string
    email: string
    mobileNumber: string
    applicantAddress: string
    applicantType: ApplicantType
    firmName: string
    State: string
    District: string
  }

  export type ApplicationForDistributionSystemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    applicantAddress?: StringFieldUpdateOperationsInput | string
    applicantType?: EnumApplicantTypeFieldUpdateOperationsInput | ApplicantType
    firmName?: StringFieldUpdateOperationsInput | string
    State?: StringFieldUpdateOperationsInput | string
    District?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationForDistributionSystemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    applicantAddress?: StringFieldUpdateOperationsInput | string
    applicantType?: EnumApplicantTypeFieldUpdateOperationsInput | ApplicantType
    firmName?: StringFieldUpdateOperationsInput | string
    State?: StringFieldUpdateOperationsInput | string
    District?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    director?: DirectorCreateNestedManyWithoutProjectInput
    projectDataFields?: ProjectDataFieldsCreateNestedManyWithoutProjectDataInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    director?: DirectorUncheckedCreateNestedManyWithoutProjectInput
    projectDataFields?: ProjectDataFieldsUncheckedCreateNestedManyWithoutProjectDataInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    director?: DirectorUpdateManyWithoutProjectNestedInput
    projectDataFields?: ProjectDataFieldsUpdateManyWithoutProjectDataNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    director?: DirectorUncheckedUpdateManyWithoutProjectNestedInput
    projectDataFields?: ProjectDataFieldsUncheckedUpdateManyWithoutProjectDataNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectDataFieldsCreateInput = {
    id?: string
    projectData?: ProjectCreateNestedOneWithoutProjectDataFieldsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDataFieldsUncheckedCreateInput = {
    id?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDataFieldsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectData?: ProjectUpdateOneWithoutProjectDataFieldsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsCreateManyInput = {
    id?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDataFieldsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorCreateInput = {
    id?: string
    project?: ProjectCreateNestedOneWithoutDirectorInput
    directorName: string
    basicIntro: string
  }

  export type DirectorUncheckedCreateInput = {
    id?: string
    projectId: string
    directorName: string
    basicIntro: string
  }

  export type DirectorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneWithoutDirectorNestedInput
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorCreateManyInput = {
    id?: string
    projectId: string
    directorName: string
    basicIntro: string
  }

  export type DirectorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumRoleNullableFilter = {
    equals?: Role | null
    in?: Enumerable<Role> | null
    notIn?: Enumerable<Role> | null
    not?: NestedEnumRoleNullableFilter | Role | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumRoleNullableWithAggregatesFilter = {
    equals?: Role | null
    in?: Enumerable<Role> | null
    notIn?: Enumerable<Role> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter | Role | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumRoleNullableFilter
    _max?: NestedEnumRoleNullableFilter
  }

  export type EnumSTATUSNullableFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableFilter | STATUS | null
  }

  export type EnumApplicantTypeFilter = {
    equals?: ApplicantType
    in?: Enumerable<ApplicantType>
    notIn?: Enumerable<ApplicantType>
    not?: NestedEnumApplicantTypeFilter | ApplicantType
  }

  export type ApplicationForDistributionSystemCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    name?: SortOrder
    email?: SortOrder
    mobileNumber?: SortOrder
    applicantAddress?: SortOrder
    applicantType?: SortOrder
    firmName?: SortOrder
    State?: SortOrder
    District?: SortOrder
  }

  export type ApplicationForDistributionSystemMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    name?: SortOrder
    email?: SortOrder
    mobileNumber?: SortOrder
    applicantAddress?: SortOrder
    applicantType?: SortOrder
    firmName?: SortOrder
    State?: SortOrder
    District?: SortOrder
  }

  export type ApplicationForDistributionSystemMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    name?: SortOrder
    email?: SortOrder
    mobileNumber?: SortOrder
    applicantAddress?: SortOrder
    applicantType?: SortOrder
    firmName?: SortOrder
    State?: SortOrder
    District?: SortOrder
  }

  export type EnumSTATUSNullableWithAggregatesFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableWithAggregatesFilter | STATUS | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSTATUSNullableFilter
    _max?: NestedEnumSTATUSNullableFilter
  }

  export type EnumApplicantTypeWithAggregatesFilter = {
    equals?: ApplicantType
    in?: Enumerable<ApplicantType>
    notIn?: Enumerable<ApplicantType>
    not?: NestedEnumApplicantTypeWithAggregatesFilter | ApplicantType
    _count?: NestedIntFilter
    _min?: NestedEnumApplicantTypeFilter
    _max?: NestedEnumApplicantTypeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DirectorListRelationFilter = {
    every?: DirectorWhereInput
    some?: DirectorWhereInput
    none?: DirectorWhereInput
  }

  export type ProjectDataFieldsListRelationFilter = {
    every?: ProjectDataFieldsWhereInput
    some?: ProjectDataFieldsWhereInput
    none?: ProjectDataFieldsWhereInput
  }

  export type DirectorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectDataFieldsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    mobileNumber?: SortOrder
    dob?: SortOrder
    occupation?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    mobileNumber?: SortOrder
    dob?: SortOrder
    occupation?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    mobileNumber?: SortOrder
    dob?: SortOrder
    occupation?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ProjectDataFieldsCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
  }

  export type ProjectDataFieldsMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
  }

  export type ProjectDataFieldsMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
  }

  export type DirectorCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    directorName?: SortOrder
    basicIntro?: SortOrder
  }

  export type DirectorMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    directorName?: SortOrder
    basicIntro?: SortOrder
  }

  export type DirectorMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    directorName?: SortOrder
    basicIntro?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumRoleFieldUpdateOperationsInput = {
    set?: Role | null
  }

  export type NullableEnumSTATUSFieldUpdateOperationsInput = {
    set?: STATUS | null
  }

  export type EnumApplicantTypeFieldUpdateOperationsInput = {
    set?: ApplicantType
  }

  export type DirectorCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<DirectorCreateWithoutProjectInput>, Enumerable<DirectorUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DirectorCreateOrConnectWithoutProjectInput>
    createMany?: DirectorCreateManyProjectInputEnvelope
    connect?: Enumerable<DirectorWhereUniqueInput>
  }

  export type ProjectDataFieldsCreateNestedManyWithoutProjectDataInput = {
    create?: XOR<Enumerable<ProjectDataFieldsCreateWithoutProjectDataInput>, Enumerable<ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>>
    connectOrCreate?: Enumerable<ProjectDataFieldsCreateOrConnectWithoutProjectDataInput>
    createMany?: ProjectDataFieldsCreateManyProjectDataInputEnvelope
    connect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
  }

  export type DirectorUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<DirectorCreateWithoutProjectInput>, Enumerable<DirectorUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DirectorCreateOrConnectWithoutProjectInput>
    createMany?: DirectorCreateManyProjectInputEnvelope
    connect?: Enumerable<DirectorWhereUniqueInput>
  }

  export type ProjectDataFieldsUncheckedCreateNestedManyWithoutProjectDataInput = {
    create?: XOR<Enumerable<ProjectDataFieldsCreateWithoutProjectDataInput>, Enumerable<ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>>
    connectOrCreate?: Enumerable<ProjectDataFieldsCreateOrConnectWithoutProjectDataInput>
    createMany?: ProjectDataFieldsCreateManyProjectDataInputEnvelope
    connect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DirectorUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<DirectorCreateWithoutProjectInput>, Enumerable<DirectorUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DirectorCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<DirectorUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: DirectorCreateManyProjectInputEnvelope
    set?: Enumerable<DirectorWhereUniqueInput>
    disconnect?: Enumerable<DirectorWhereUniqueInput>
    delete?: Enumerable<DirectorWhereUniqueInput>
    connect?: Enumerable<DirectorWhereUniqueInput>
    update?: Enumerable<DirectorUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<DirectorUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<DirectorScalarWhereInput>
  }

  export type ProjectDataFieldsUpdateManyWithoutProjectDataNestedInput = {
    create?: XOR<Enumerable<ProjectDataFieldsCreateWithoutProjectDataInput>, Enumerable<ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>>
    connectOrCreate?: Enumerable<ProjectDataFieldsCreateOrConnectWithoutProjectDataInput>
    upsert?: Enumerable<ProjectDataFieldsUpsertWithWhereUniqueWithoutProjectDataInput>
    createMany?: ProjectDataFieldsCreateManyProjectDataInputEnvelope
    set?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    disconnect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    delete?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    connect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    update?: Enumerable<ProjectDataFieldsUpdateWithWhereUniqueWithoutProjectDataInput>
    updateMany?: Enumerable<ProjectDataFieldsUpdateManyWithWhereWithoutProjectDataInput>
    deleteMany?: Enumerable<ProjectDataFieldsScalarWhereInput>
  }

  export type DirectorUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<DirectorCreateWithoutProjectInput>, Enumerable<DirectorUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DirectorCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<DirectorUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: DirectorCreateManyProjectInputEnvelope
    set?: Enumerable<DirectorWhereUniqueInput>
    disconnect?: Enumerable<DirectorWhereUniqueInput>
    delete?: Enumerable<DirectorWhereUniqueInput>
    connect?: Enumerable<DirectorWhereUniqueInput>
    update?: Enumerable<DirectorUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<DirectorUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<DirectorScalarWhereInput>
  }

  export type ProjectDataFieldsUncheckedUpdateManyWithoutProjectDataNestedInput = {
    create?: XOR<Enumerable<ProjectDataFieldsCreateWithoutProjectDataInput>, Enumerable<ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>>
    connectOrCreate?: Enumerable<ProjectDataFieldsCreateOrConnectWithoutProjectDataInput>
    upsert?: Enumerable<ProjectDataFieldsUpsertWithWhereUniqueWithoutProjectDataInput>
    createMany?: ProjectDataFieldsCreateManyProjectDataInputEnvelope
    set?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    disconnect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    delete?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    connect?: Enumerable<ProjectDataFieldsWhereUniqueInput>
    update?: Enumerable<ProjectDataFieldsUpdateWithWhereUniqueWithoutProjectDataInput>
    updateMany?: Enumerable<ProjectDataFieldsUpdateManyWithWhereWithoutProjectDataInput>
    deleteMany?: Enumerable<ProjectDataFieldsScalarWhereInput>
  }

  export type ProjectCreateNestedOneWithoutProjectDataFieldsInput = {
    create?: XOR<ProjectCreateWithoutProjectDataFieldsInput, ProjectUncheckedCreateWithoutProjectDataFieldsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectDataFieldsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutProjectDataFieldsNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectDataFieldsInput, ProjectUncheckedCreateWithoutProjectDataFieldsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectDataFieldsInput
    upsert?: ProjectUpsertWithoutProjectDataFieldsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutProjectDataFieldsInput, ProjectUncheckedUpdateWithoutProjectDataFieldsInput>
  }

  export type ProjectCreateNestedOneWithoutDirectorInput = {
    create?: XOR<ProjectCreateWithoutDirectorInput, ProjectUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDirectorInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutDirectorNestedInput = {
    create?: XOR<ProjectCreateWithoutDirectorInput, ProjectUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDirectorInput
    upsert?: ProjectUpsertWithoutDirectorInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutDirectorInput, ProjectUncheckedUpdateWithoutDirectorInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumRoleNullableFilter = {
    equals?: Role | null
    in?: Enumerable<Role> | null
    notIn?: Enumerable<Role> | null
    not?: NestedEnumRoleNullableFilter | Role | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumRoleNullableWithAggregatesFilter = {
    equals?: Role | null
    in?: Enumerable<Role> | null
    notIn?: Enumerable<Role> | null
    not?: NestedEnumRoleNullableWithAggregatesFilter | Role | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumRoleNullableFilter
    _max?: NestedEnumRoleNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumSTATUSNullableFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableFilter | STATUS | null
  }

  export type NestedEnumApplicantTypeFilter = {
    equals?: ApplicantType
    in?: Enumerable<ApplicantType>
    notIn?: Enumerable<ApplicantType>
    not?: NestedEnumApplicantTypeFilter | ApplicantType
  }

  export type NestedEnumSTATUSNullableWithAggregatesFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableWithAggregatesFilter | STATUS | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSTATUSNullableFilter
    _max?: NestedEnumSTATUSNullableFilter
  }

  export type NestedEnumApplicantTypeWithAggregatesFilter = {
    equals?: ApplicantType
    in?: Enumerable<ApplicantType>
    notIn?: Enumerable<ApplicantType>
    not?: NestedEnumApplicantTypeWithAggregatesFilter | ApplicantType
    _count?: NestedIntFilter
    _min?: NestedEnumApplicantTypeFilter
    _max?: NestedEnumApplicantTypeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DirectorCreateWithoutProjectInput = {
    id?: string
    directorName: string
    basicIntro: string
  }

  export type DirectorUncheckedCreateWithoutProjectInput = {
    id?: string
    directorName: string
    basicIntro: string
  }

  export type DirectorCreateOrConnectWithoutProjectInput = {
    where: DirectorWhereUniqueInput
    create: XOR<DirectorCreateWithoutProjectInput, DirectorUncheckedCreateWithoutProjectInput>
  }

  export type DirectorCreateManyProjectInputEnvelope = {
    data: Enumerable<DirectorCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type ProjectDataFieldsCreateWithoutProjectDataInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDataFieldsUncheckedCreateWithoutProjectDataInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDataFieldsCreateOrConnectWithoutProjectDataInput = {
    where: ProjectDataFieldsWhereUniqueInput
    create: XOR<ProjectDataFieldsCreateWithoutProjectDataInput, ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>
  }

  export type ProjectDataFieldsCreateManyProjectDataInputEnvelope = {
    data: Enumerable<ProjectDataFieldsCreateManyProjectDataInput>
    skipDuplicates?: boolean
  }

  export type DirectorUpsertWithWhereUniqueWithoutProjectInput = {
    where: DirectorWhereUniqueInput
    update: XOR<DirectorUpdateWithoutProjectInput, DirectorUncheckedUpdateWithoutProjectInput>
    create: XOR<DirectorCreateWithoutProjectInput, DirectorUncheckedCreateWithoutProjectInput>
  }

  export type DirectorUpdateWithWhereUniqueWithoutProjectInput = {
    where: DirectorWhereUniqueInput
    data: XOR<DirectorUpdateWithoutProjectInput, DirectorUncheckedUpdateWithoutProjectInput>
  }

  export type DirectorUpdateManyWithWhereWithoutProjectInput = {
    where: DirectorScalarWhereInput
    data: XOR<DirectorUpdateManyMutationInput, DirectorUncheckedUpdateManyWithoutDirectorInput>
  }

  export type DirectorScalarWhereInput = {
    AND?: Enumerable<DirectorScalarWhereInput>
    OR?: Enumerable<DirectorScalarWhereInput>
    NOT?: Enumerable<DirectorScalarWhereInput>
    id?: StringFilter | string
    projectId?: StringFilter | string
    directorName?: StringFilter | string
    basicIntro?: StringFilter | string
  }

  export type ProjectDataFieldsUpsertWithWhereUniqueWithoutProjectDataInput = {
    where: ProjectDataFieldsWhereUniqueInput
    update: XOR<ProjectDataFieldsUpdateWithoutProjectDataInput, ProjectDataFieldsUncheckedUpdateWithoutProjectDataInput>
    create: XOR<ProjectDataFieldsCreateWithoutProjectDataInput, ProjectDataFieldsUncheckedCreateWithoutProjectDataInput>
  }

  export type ProjectDataFieldsUpdateWithWhereUniqueWithoutProjectDataInput = {
    where: ProjectDataFieldsWhereUniqueInput
    data: XOR<ProjectDataFieldsUpdateWithoutProjectDataInput, ProjectDataFieldsUncheckedUpdateWithoutProjectDataInput>
  }

  export type ProjectDataFieldsUpdateManyWithWhereWithoutProjectDataInput = {
    where: ProjectDataFieldsScalarWhereInput
    data: XOR<ProjectDataFieldsUpdateManyMutationInput, ProjectDataFieldsUncheckedUpdateManyWithoutProjectDataFieldsInput>
  }

  export type ProjectDataFieldsScalarWhereInput = {
    AND?: Enumerable<ProjectDataFieldsScalarWhereInput>
    OR?: Enumerable<ProjectDataFieldsScalarWhereInput>
    NOT?: Enumerable<ProjectDataFieldsScalarWhereInput>
    id?: StringFilter | string
    projectId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    fieldName?: StringFilter | string
    fieldValue?: StringFilter | string
  }

  export type ProjectCreateWithoutProjectDataFieldsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    director?: DirectorCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectDataFieldsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    director?: DirectorUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectDataFieldsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectDataFieldsInput, ProjectUncheckedCreateWithoutProjectDataFieldsInput>
  }

  export type ProjectUpsertWithoutProjectDataFieldsInput = {
    update: XOR<ProjectUpdateWithoutProjectDataFieldsInput, ProjectUncheckedUpdateWithoutProjectDataFieldsInput>
    create: XOR<ProjectCreateWithoutProjectDataFieldsInput, ProjectUncheckedCreateWithoutProjectDataFieldsInput>
  }

  export type ProjectUpdateWithoutProjectDataFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    director?: DirectorUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectDataFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    director?: DirectorUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutDirectorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    projectDataFields?: ProjectDataFieldsCreateNestedManyWithoutProjectDataInput
  }

  export type ProjectUncheckedCreateWithoutDirectorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    mobileNumber?: string | null
    dob?: string | null
    occupation?: string | null
    projectDataFields?: ProjectDataFieldsUncheckedCreateNestedManyWithoutProjectDataInput
  }

  export type ProjectCreateOrConnectWithoutDirectorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDirectorInput, ProjectUncheckedCreateWithoutDirectorInput>
  }

  export type ProjectUpsertWithoutDirectorInput = {
    update: XOR<ProjectUpdateWithoutDirectorInput, ProjectUncheckedUpdateWithoutDirectorInput>
    create: XOR<ProjectCreateWithoutDirectorInput, ProjectUncheckedCreateWithoutDirectorInput>
  }

  export type ProjectUpdateWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    projectDataFields?: ProjectDataFieldsUpdateManyWithoutProjectDataNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    projectDataFields?: ProjectDataFieldsUncheckedUpdateManyWithoutProjectDataNestedInput
  }

  export type DirectorCreateManyProjectInput = {
    id?: string
    directorName: string
    basicIntro: string
  }

  export type ProjectDataFieldsCreateManyProjectDataInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldName: string
    fieldValue: string
  }

  export type DirectorUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateManyWithoutDirectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    directorName?: StringFieldUpdateOperationsInput | string
    basicIntro?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsUpdateWithoutProjectDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsUncheckedUpdateWithoutProjectDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDataFieldsUncheckedUpdateManyWithoutProjectDataFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}